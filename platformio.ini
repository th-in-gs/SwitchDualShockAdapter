; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


[platformio]
default_envs = ATmega8

[env:ATmega]
platform = atmelavr

; Some python help to build V-USB without modifying its source.
extra_scripts =
    pre:v-usb_platformio_helper.py
    pre:timer0_interrupt_allower.py

; Uncomment these lines to switch on V-USB's logging of USB traffic to
; The serial port:
; build_flags =
;    ${env.build_flags}
;    -DDEBUG_LEVEL=2

; Chip configuration:
; This configures the _software_ to assume a 12.8 MHz clock - it does not affect
; the chip itself (the fuses defined in the bootloader environment, below set up
; the internal oscilator at 8MHz). We tune it at runtime, in software, to run
; at 12.8MHz.
board_build.f_cpu = 12800000

; PlatformIO serial monitor settings, for serial debugging:
; A reliable speed for 12.8MHz and 16MHz.
monitor_speed = 266667
monitor_port = /dev/cu.usbserial-0001

build_flags =
    ${env.build_flags}
    -std=c++17

; Program upload settings:
; Use the bootloader that the 'ATmega8Bootloader' environment below sets up.
; On Windows, `upload_port` might be e.g. 'COM1' rather than a path.
; On Mac and Linux, the path might differ depending on the Arduino and/or
; serial connection.
upload_protocol = arduino
upload_port = /dev/cu.usbserial-0001
upload_speed = ${env:ATmega8Bootloader.board_bootloader.speed}


; Sadly-needed workarounds:
; -e:
;   From the 'avrdude' docs: "Causes a chip erase to be executed. This will
;   reset the contents of the flash ROM and EEPROM to the value ‘0xff’, and
;   clear all lock bits. Except for ATxmega devices which can use page erase, it
;   is basically a prerequisite command before the flash ROM can be reprogrammed
;   again. The only exception would be if the new contents would exclusively
;   cause bits to be programmed from the value ‘1’ to ‘0’."
; -P and -b:
;   PlatfomIO's '--target bootloader' doesn't work without it - the 'upload_XXX'
;   settings are not used even though they need to be.
; -u:
;   Work around the same issue relating to a  "fake" efuse described as
;   affecting the Windows Arduino IDE here:
;   https://github.com/arduino/arduino-cli/issues/844
upload_flags =
    -e
    -P${UPLOAD_PORT}
    -b${UPLOAD_SPEED}
    -u

[env:ATmegaBootloader]
extends = env:ATmega

framework = arduino

; Bootloader runs at the fuse-defined 8MHz, even though we tune to 12.8MHz
; during regular use.
board_build.f_cpu = 8000000L

; This seems to be a stable speed. Faster speeds are either not supported by
; avrdude on Mac, or are not compatible with the 8MHz internal oscilator.
board_bootloader.speed = 57600

; Use an Arduino-as-ISP-powered programmer.
; On Windows, `upload_port` might be e.g. 'COM1' rather than a path.
; On Mac and Linux, the path might differ depending on the Arduino and/or
; serial connection.
upload_protocol = stk500v1
upload_port = /dev/cu.usbserial-0001
upload_speed = 19200

[env:ATmega8]
extends = env:ATmega

board = ATmega8

[env:ATmega88]
extends = env:ATmega

board = ATmega88

[env:ATmega8Bootloader]
extends = env:ATmegaBootloader

board = ATmega8

; BODLEVEL=1, BODEN=0, SUT=10, CKSEL=0100
board_bootloader.lfuse = 0xA4

; RSTDISBL=1, WTDON=1, SPIEN=0, CKOPT=1, EESAVE=0, BOOTSZ=01, BOOTRST=0
; [512K bootloader]
board_bootloader.hfuse = 0xD4

[env:ATmega88Bootloader]
extends = env:ATmegaBootloader

board = ATmega88

; BODLEVEL=1, BODEN=0, SUT=10, CKSEL=0100
board_bootloader.lfuse = 0xA4

; RSTDISBL=1, WTDON=1, SPIEN=0, CKOPT=1, EESAVE=0, BOOTSZ=01, BOOTRST=0
; [512K bootloader]
board_bootloader.hfuse = 0xD4

